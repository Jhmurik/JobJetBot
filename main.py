import asyncio import os from aiohttp import web from aiogram import Bot, Dispatcher from aiogram.fsm.storage.memory import MemoryStorage from aiogram.types import Message from aiogram.webhook.aiohttp_server import SimpleRequestHandler from aiogram.fsm.context import FSMContext from aiogram.fsm.state import State, StatesGroup from aiogram.filters import CommandStart

=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===

TOKEN = 7883161984:AAF_T1IMahf_EYS42limVzfW-5NGuyNu0Qk BASE_WEBHOOK_URL = os.getenv("WEBHOOK_BASE_URL") WEBHOOK_PATH = f"/webhook/{TOKEN}"

=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===

bot = Bot(token=TOKEN) dp = Dispatcher(storage=MemoryStorage())

=== –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è ===

class DriverForm(StatesGroup): full_name = State() phone = State() experience = State() license_category = State() region = State()

=== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∞–Ω–∫–µ—Ç—ã ===

@dp.message(CommandStart()) async def start(message: Message, state: FSMContext): await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ JobJet.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:") await state.set_state(DriverForm.full_name)

@dp.message(DriverForm.full_name) async def process_name(message: Message, state: FSMContext): await state.update_data(full_name=message.text) await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:") await state.set_state(DriverForm.phone)

@dp.message(DriverForm.phone) async def process_phone(message: Message, state: FSMContext): await state.update_data(phone=message.text) await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:") await state.set_state(DriverForm.experience)

@dp.message(DriverForm.experience) async def process_experience(message: Message, state: FSMContext): await state.update_data(experience=message.text) await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä CE):") await state.set_state(DriverForm.license_category)

@dp.message(DriverForm.license_category) async def process_license(message: Message, state: FSMContext): await state.update_data(license_category=message.text) await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã —Ä–µ–≥–∏–æ–Ω–∞?") await state.set_state(DriverForm.region)

@dp.message(DriverForm.region) async def process_region(message: Message, state: FSMContext): await state.update_data(region=message.text) data = await state.get_data() await message.answer( f"\u2705 –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞:\n\n" f"üë§ –§–ò–û: {data['full_name']}\n" f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n" f"üöö –û–ø—ã—Ç: {data['experience']}\n" f"üî† –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['license_category']}\n" f"üåç –†–µ–≥–∏–æ–Ω: {data['region']}" ) await state.clear()

=== Webhook —Å–æ–±—ã—Ç–∏—è ===

async def on_startup(app: web.Application): await bot.set_webhook(f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}")

async def on_shutdown(app: web.Application): await bot.delete_webhook()

=== –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===

def create_app(): app = web.Application() app["bot"] = bot app.on_startup.append(on_startup) app.on_shutdown.append(on_shutdown) SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH) return app

if name == "main": web.run_app(create_app(), port=int(os.getenv("PORT", 8080)))

