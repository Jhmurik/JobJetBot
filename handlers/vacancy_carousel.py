from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from asyncpg import Pool

router = Router()

# üß† –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
vacancy_cache = {}

# üîò –ö–Ω–æ–ø–∫–∞: "–í–∞–∫–∞–Ω—Å–∏–∏"
@router.message(F.text == "üìÑ –í–∞–∫–∞–Ω—Å–∏–∏")
async def show_first_vacancy(message: Message, state: FSMContext):
    user_id = message.from_user.id
    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    async with pool.acquire() as conn:
        vacancies = await conn.fetch("""
            SELECT v.id, v.title, v.truck_type, v.salary, v.region, v.requirements, v.contacts, c.name AS company_name
            FROM vacancies v
            JOIN companies c ON v.company_id = c.id
            WHERE v.is_published = TRUE
            ORDER BY v.created_at DESC
            LIMIT 20
        """)

    if not vacancies:
        await message.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    vacancy_cache[user_id] = vacancies
    await state.update_data(vacancy_index=0)
    await send_vacancy_card(message, vacancies[0], 0, len(vacancies))


# üì© –ö–∞—Ä—Ç–æ—á–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
async def send_vacancy_card(message_or_cb, vacancy, index, total):
    text = (
        f"üìå <b>{vacancy['title']}</b>\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company_name']}\n"
        f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vacancy['truck_type']}\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary']}\n"
        f"üåç –†–µ–≥–∏–æ–Ω: {vacancy['region']}\n"
        f"üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {vacancy['requirements']}\n"
        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {vacancy['contacts']}\n\n"
        f"–í–∞–∫–∞–Ω—Å–∏—è {index+1} –∏–∑ {total}"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_vacancy"),
            InlineKeyboardButton(text="üì¨ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data="apply_disabled"),
            InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", callback_data="next_vacancy")
        ]
    ])

    if isinstance(message_or_cb, CallbackQuery):
        await message_or_cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
        await message_or_cb.answer()
    else:
        await message_or_cb.answer(text, parse_mode="HTML", reply_markup=kb)


# üîÅ –°–ª–µ–¥—É—é—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
@router.callback_query(F.data == "next_vacancy")
async def next_vacancy(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    data = await state.get_data()
    index = data.get("vacancy_index", 0)
    vacancies = vacancy_cache.get(user_id)

    if vacancies and index + 1 < len(vacancies):
        index += 1
        await state.update_data(vacancy_index=index)
        await send_vacancy_card(call, vacancies[index], index, len(vacancies))


# ‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
@router.callback_query(F.data == "prev_vacancy")
async def prev_vacancy(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    data = await state.get_data()
    index = data.get("vacancy_index", 0)
    vacancies = vacancy_cache.get(user_id)

    if vacancies and index > 0:
        index -= 1
        await state.update_data(vacancy_index=index)
        await send_vacancy_card(call, vacancies[index], index, len(vacancies))


# üì¨ –û—Ç–∫–ª–∏–∫ (–∑–∞–≥–ª—É—à–∫–∞)
@router.callback_query(F.data == "apply_disabled")
async def apply_vacancy(call: CallbackQuery):
    await call.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å Premium-–ø–æ–¥–ø–∏—Å–∫–æ–π.", show_alert=True)
