from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.driver_state import DriverForm # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤–µ—Ä–Ω—ã–π

router = Router()

# üåç –Ø–∑—ã–∫–∏
translations = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß English",
    "uz": "üá∫üáø O ªzbek",
    "uk": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "hi": "üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",
    "pl": "üáµüá± Polski"
}

language_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=lang)] for lang in translations.values()],
    resize_keyboard=True,
    one_time_keyboard=True
)

main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton(text="üì¶ –î–ª—è –∫–æ–º–ø–∞–Ω–∏–π")],
        [KeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

# –í–ù–ò–ú–ê–ù–ò–ï: user_languages –Ω–∞ MemoryStorage –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤.
# –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
user_languages = {}

@router.message(Command("start"))
async def handle_start(message: Message, state: FSMContext):
    print(f"üëâ /start –æ—Ç {message.from_user.id}")
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    await message.answer("üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_keyboard)

@router.message(F.text.in_(translations.values()))
async def select_language(message: Message):
    lang_code = next((code for code, label in translations.items() if label == message.text), None)
    if lang_code:
        user_languages[message.from_user.id] = lang_code # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
        await message.answer("‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫.")

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@router.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def start_fill_form_button(message: Message, state: FSMContext):
    await state.set_state(DriverForm.full_name) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
    await message.answer("üìù –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–ø–æ–ª–Ω–æ–µ –∏–º—è* (–§–ò–û):", parse_mode="Markdown")

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
@router.message(F.text == "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
async def change_language_button(message: Message):
    await message.answer("üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_keyboard)

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏ –≤ stats.py)
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_button(message: Message):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ
    # –í–∞–∂–Ω–æ: —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã handle_stats –±—ã–ª –≤ —ç—Ç–æ–º –∂–µ —Ä–æ—É—Ç–µ—Ä–µ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.
    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤—Å—è –ª–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—ã–ª–∞ –≤ handlers/stats.py,
    # —Ç–æ —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –ø–æ–ª–∞–≥–∞–π—Ç–µ—Å—å –Ω–∞ router.message(Command("stats"))
    # –∏–ª–∏ router.message(F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") –∏–∑ handlers/stats.py
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /stats, –∫–æ—Ç–æ—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç stats_router
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ, –µ—Å–ª–∏ handlers/stats.py —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç F.text == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ, —á—Ç–æ–±—ã –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª stats_router
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —Ç–∞–∫ –∫–∞–∫ `stats_router` –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω,
    # –ª—É—á—à–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    # –î–ª—è —ç—Ç–æ–≥–æ, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ handlers/stats.py –µ—Å—Ç—å
    # @router.message(F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    # –ê –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
    # await message.answer("–ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /stats –∏–ª–∏ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    pass # –ü—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–∞–∫ –∫–∞–∫ handlers/stats.py –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì¶ –î–ª—è –∫–æ–º–ø–∞–Ω–∏–π" (–∑–∞–≥–ª—É—à–∫–∞)
@router.message(F.text == "üì¶ –î–ª—è –∫–æ–º–ø–∞–Ω–∏–π")
async def for_companies_button(message: Message):
    await message.answer("üíº –†–∞–∑–¥–µ–ª –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")
    
