from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states.manager_state import ManagerForm
from asyncpg import Pool
import uuid

router = Router()

@router.message(F.text == "üë®‚Äçüíº –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä")
async def start_manager_registration(message: Message, state: FSMContext):
    await state.set_state(ManagerForm.full_name)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")

@router.message(ManagerForm.full_name)
async def set_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(ManagerForm.position)
    await message.answer("üíº –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")

@router.message(ManagerForm.position)
async def set_position(message: Message, state: FSMContext):
    await state.update_data(position=message.text)
    await state.set_state(ManagerForm.phone)
    await message.answer("üì± –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(ManagerForm.phone)
async def set_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(ManagerForm.email)
    await message.answer("üìß –£–∫–∞–∂–∏—Ç–µ email (–µ—Å–ª–∏ –µ—Å—Ç—å):")

@router.message(ManagerForm.email)
async def set_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await state.set_state(ManagerForm.company_name)
    await message.answer("üè¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏):")

@router.message(ManagerForm.company_name)
async def set_company_name(message: Message, state: FSMContext):
    company = message.text.strip().lower()
    await state.update_data(company_name=company)

    if company == "–Ω–µ—Ç":
        await state.update_data(company_id=None)
        await state.set_state(ManagerForm.regions)
        await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã, –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ï–≤—Ä–æ–ø–∞, –°–ù–ì, –°–®–ê):")
    else:
        await state.set_state(ManagerForm.company_country)
        await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")

@router.message(ManagerForm.company_country)
async def set_company_country(message: Message, state: FSMContext):
    await state.update_data(company_country=message.text)
    await state.set_state(ManagerForm.company_city)
    await message.answer("üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")

@router.message(ManagerForm.company_city)
async def set_company_city(message: Message, state: FSMContext):
    await state.update_data(company_city=message.text)
    await state.set_state(ManagerForm.regions)
    await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã, –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ï–≤—Ä–æ–ø–∞, –°–ù–ì, –°–®–ê):")

@router.message(ManagerForm.regions)
async def set_regions(message: Message, state: FSMContext):
    await state.update_data(regions=[r.strip() for r in message.text.split(",")])
    await state.set_state(ManagerForm.confirm)

    data = await state.get_data()
    preview = (
        f"üë§ –ò–º—è: {data['full_name']}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['position']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üìß Email: {data['email']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company_name']} ({data.get('company_country', '-')}, {data.get('company_city', '-')})\n"
        f"üåç –†–µ–≥–∏–æ–Ω—ã: {', '.join(data['regions'])}"
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"{preview}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:", reply_markup=kb)

@router.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def confirm_registration(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    company_id = None

    async with pool.acquire() as conn:
        if data['company_name'] and data['company_name'].lower() != '–Ω–µ—Ç':
            company_id = uuid.uuid4()
            await conn.execute("""
                INSERT INTO companies (id, name, description, country, city, owner_id, regions)
                VALUES ($1, $2, '', $3, $4, $5, $6)
                ON CONFLICT (id) DO NOTHING
            """, company_id, data['company_name'], data['company_country'], data['company_city'], user_id, data['regions'])
        else:
            company_id = uuid.uuid4()  # –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è

        manager_id = uuid.uuid4()
        await conn.execute("""
            INSERT INTO managers (
                id, company_id, user_id, full_name, position,
                phone, email, is_owner, is_active, regions
            ) VALUES (
                $1, $2, $3, $4, $5,
                $6, $7, $8, $9, $10
            )
        """, manager_id, company_id, user_id, data['full_name'], data['position'],
             data['phone'], data['email'], True, False, data['regions'])

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Premium ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.")
    await state.clear()

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_registration(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
