from aiogram import Router, F
from aiogram.types import Message
from openai import AsyncOpenAI
import os

router = Router()

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞: AI-–ø–æ–º–æ—â–Ω–∏–∫ (GPT)
@router.message(F.text.lower().startswith("ü§ñ –ø–æ–º–æ—â–Ω–∏–∫") | F.text.lower().startswith("/ask"))
async def ask_ai(message: Message):
    query = message.text.replace("ü§ñ –ø–æ–º–æ—â–Ω–∏–∫", "").replace("/ask", "").strip()

    if not query:
        await message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    # üîë –ö–ª—é—á OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        await message.answer("‚ùå OpenAI API –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.")
        return

    client = AsyncOpenAI(api_key=openai_api_key)

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π."},
                {"role": "user", "content": query}
            ],
            temperature=0.7
        )
        reply = response.choices[0].message.content.strip()
        await message.answer(reply)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ AI: " + str(e))
