from aiohttp import web
from db import activate_driver, save_payment
import hmac
import hashlib
import os
import json

CRYPTOMUS_SECRET = os.getenv("CRYPTOMUS_SECRET")

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç Cryptomus
def verify_signature(body: bytes, signature: str) -> bool:
    computed = hmac.new(CRYPTOMUS_SECRET.encode(), body, hashlib.sha256).hexdigest()
    return hmac.compare_digest(computed, signature)

# üì• Webhook –æ—Ç Cryptomus
async def cryptomus_webhook(request: web.Request) -> web.Response:
    body = await request.read()
    signature = request.headers.get("sign")

    if not signature or not verify_signature(body, signature):
        return web.Response(status=401, text="‚ùå Invalid signature")

    data = json.loads(body)
    status = data.get("status")
    order = data.get("order_id")
    user_id = int(data.get("order_id", "0"))  # –µ—Å–ª–∏ order_id = uuid, –Ω—É–∂–Ω–æ –∏–Ω–∞—á–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å

    # üí≥ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    if status == "paid":
        role = data.get("custom", {}).get("role") or "driver"

        app = request.app
        pool = app["db"]

        async with pool.acquire() as conn:
            # üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å
            if role == "driver":
                await activate_driver(conn, user_id)

            # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await save_payment(pool, {
                "user_id": user_id,
                "role": role,
                "amount": data.get("amount"),
                "currency": data.get("currency"),
                "payment_method": "cryptomus",
                "payment_type": "premium",
                "description": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç Webhook"
            })

        return web.Response(status=200, text="‚úÖ Payment processed")

    return web.Response(status=200, text="üïê Payment not confirmed")
