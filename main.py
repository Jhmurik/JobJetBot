import asyncio
import os
import asyncpg
from contextlib import asynccontextmanager
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –±–∞–∑–æ–≤–æ–≥–æ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = "7883161984:AAF_T1IMahf_EYS42limVzfW-5NGuyNu0Qk"
WEBHOOK_PATH = f"/webhook/{TOKEN}"
BASE_WEBHOOK_URL = os.getenv("WEBHOOK_BASE_URL")
WEBHOOK_URL = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@asynccontextmanager
async def lifespan(app):
    db_url = os.getenv("DATABASE_URL")
    pool = await asyncpg.create_pool(dsn=db_url)
    await create_tables(pool)
    app['db'] = pool
    yield
    await pool.close()
    
# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message()
async def echo_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ JobJet –±–æ—Ç.")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL)

# –£–¥–∞–ª–µ–Ω–∏–µ webhook –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
async def on_shutdown(app: web.Application):
    await bot.delete_webhook()

def create_app():
    app = web.Application(lifespan=lifespan)  # üîß lifespan –¥–æ–±–∞–≤–ª–µ–Ω —Å—é–¥–∞
    app["bot"] = bot

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö—É–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    app.router.add_get("/", lambda _: web.Response(text="JobJet AI Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"))

    return app
    
    # üëá –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    app.cleanup_ctx.append(lifespan)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    app.router.add_get("/", lambda _: web.Response(text="JobJet AI is working"))
    return app

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    web.run_app(create_app(), port=int(os.getenv("PORT", 8000)))
