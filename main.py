import os
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeDefault, MenuButtonCommands
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.exceptions import TelegramAPIError

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from handlers.start import router as start_router
from handlers.driver_form import router as driver_form_router
from handlers.stats import router as stats_router

# –ò–º–ø–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
from db import connect_to_db

# –¢–æ–∫–µ–Ω –∏ Webhook
TOKEN = "7883161984:AAF_T1IMahf_EYS42limVzfW-5NGuyNu0Qk"
BASE_WEBHOOK_URL = "https://jobjetbot.onrender.com"
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{BASE_WEBHOOK_URL.rstrip('/')}{WEBHOOK_PATH}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(start_router)
dp.include_router(driver_form_router)
dp.include_router(stats_router)

async def on_startup(app: web.Application):
    print("üöÄ –ó–∞–ø—É—Å–∫ JobJet AI Bot...")
    
    # –î–ª—è Render –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Long Polling
    # –ù–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω Webhook:
    try:
        print(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook: {WEBHOOK_URL}")
        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True,
            allowed_updates=dp.resolve_used_update_types()
        )
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except TelegramAPIError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Long Polling –ø—Ä–∏ –æ—à–∏–±–∫–µ
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Long Polling —Ä–µ–∂–∏–º")
        await bot.delete_webhook()
        executor.start_polling(dp, skip_updates=True)
        return

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        app["db"] = await connect_to_db()
        print("‚úÖ –ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    try:
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand(command="stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        ], scope=BotCommandScopeDefault())
        
        await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        print("üìã –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")

async def on_shutdown(app: web.Application):
    print("üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
    await bot.delete_webhook()
    await dp.storage.close()
    await bot.session.close()
    print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Render
def main():
    # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º shutdown –∫–æ–ª–±—ç–∫
    app.on_shutdown.append(on_shutdown)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º startup –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.on_startup.append(on_startup)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    setup_application(app, dp, bot=bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    return app

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Long Polling
    from aiogram import executor
    print("üîÅ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Long Polling")
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
