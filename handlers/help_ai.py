from aiogram import Router, F
from aiogram.types import Message
from openai import AsyncOpenAI

router = Router()

# üîê –£–∫–∞–∂–∏ —Å–≤–æ–π OpenAI API-–∫–ª—é—á
OPENAI_API_KEY = "sk-..."  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –∫–ª—é—á

client = AsyncOpenAI(api_key=OPENAI_API_KEY)

@router.message(F.text.lower().startswith("ü§ñ"))
async def ai_assistant(message: Message):
    prompt = message.text.replace("ü§ñ", "").strip()

    if not prompt:
        await message.answer("ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏. –ü—Ä–∏–º–µ—Ä: ü§ñ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –õ–∏—Ç–≤–µ?")
        return

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ª–æ–≥–∏—Å—Ç–æ–≤ –≤ –ï–≤—Ä–æ–ø–µ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=512
        )

        reply = response.choices[0].message.content
        await message.answer(f"ü§ñ {reply}")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print("AI Error:", e)
