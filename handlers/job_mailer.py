from aiogram import Router
from aiogram.types import Message
from asyncpg import Pool

router = Router()

# üîî –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤–æ–¥–∏—Ç–µ–ª—è–º
@router.message(lambda m: m.text == "üì® –†–∞—Å—Å—ã–ª–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
async def send_job_mailings(message: Message):
    admin_ids = [5814167740, 787919568]  # üëë ID –∞–¥–º–∏–Ω–æ–≤
    if message.from_user.id not in admin_ids:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")
        return

    app = message.bot._ctx.get("application")
    pool: Pool = app.get("db")
    if not pool:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    async with pool.acquire() as conn:
        # üßë‚Äçüîß –ê–∫—Ç–∏–≤–Ω—ã–µ Premium-–≤–æ–¥–∏—Ç–µ–ª–∏ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        drivers = await conn.fetch("""
            SELECT id, regions FROM drivers
            WHERE is_active = TRUE AND id IN (
                SELECT user_id FROM payments 
                WHERE role = 'driver' AND payment_type = 'premium'
                  AND created_at > (CURRENT_DATE - INTERVAL '30 days')
            )
        """)

        # üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancies = await conn.fetch("""
            SELECT id, title, region, salary, truck_type, contacts 
            FROM vacancies 
            WHERE is_published = TRUE 
            ORDER BY created_at DESC 
            LIMIT 20
        """)

    if not vacancies:
        await message.answer("‚ùå –ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        return

    count = 0
    for driver in drivers:
        user_id = driver["id"]
        preferred_regions = driver["regions"] or []

        if not preferred_regions:
            continue  # –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        # üìç –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
        matched = [v for v in vacancies if v["region"] in preferred_regions]

        if matched:
            text = "üì¨ <b>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤–∞—Å:</b>\n\n"
            for v in matched[:5]:  # –º–∞–∫—Å–∏–º—É–º 5 —à—Ç—É–∫
                text += (
                    f"üîπ <b>{v['title']}</b>\n"
                    f"üìç –†–µ–≥–∏–æ–Ω: {v['region']}\n"
                    f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {v['salary']}\n"
                    f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {v['truck_type']}\n"
                    f"üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {v['contacts']}\n\n"
                )
            try:
                await message.bot.send_message(chat_id=user_id, text=text, parse_mode="HTML")
                count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    if count == 0:
        await message.answer("üì≠ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
