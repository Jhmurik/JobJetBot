from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from states.driver_state import DriverForm
from asyncpg import Pool

router = Router()

@router.message(DriverForm.full_name)
async def handle_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(DriverForm.birth_date)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05.08.1989):")

@router.message(DriverForm.birth_date)
async def handle_birth_date(message: Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    await state.set_state(DriverForm.citizenship)
    await message.answer("üåç –í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:")

@router.message(DriverForm.citizenship)
async def handle_citizenship(message: Message, state: FSMContext):
    await state.update_data(citizenship=message.text)
    await state.set_state(DriverForm.residence)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")

@router.message(DriverForm.residence)
async def handle_residence(message: Message, state: FSMContext):
    await state.update_data(residence=message.text)
    await state.set_state(DriverForm.license_type)
    await message.answer("üöò –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: B, C, E):")

@router.message(DriverForm.license_type)
async def handle_license_type(message: Message, state: FSMContext):
    await state.update_data(license_type=message.text)
    await state.set_state(DriverForm.experience)
    await message.answer("üìà –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –ª–µ—Ç):")

@router.message(DriverForm.experience)
async def handle_experience(message: Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await state.set_state(DriverForm.languages)
    await message.answer("üó£Ô∏è –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π):")

@router.message(DriverForm.languages)
async def handle_languages(message: Message, state: FSMContext):
    await state.update_data(languages=[lang.strip() for lang in message.text.split(",")])
    await state.set_state(DriverForm.documents)
    await message.answer("üìÑ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í–ù–ñ, –±–∏–æ–º–µ—Ç—Ä–∏—è, –ø–∞—Å–ø–æ—Ä—Ç –ï–°):")

@router.message(DriverForm.documents)
async def handle_documents(message: Message, state: FSMContext):
    await state.update_data(documents=message.text)
    await state.set_state(DriverForm.truck_type)
    await message.answer("üöõ –ö–∞–∫–æ–π —Ç–∏–ø –≥—Ä—É–∑–æ–≤–∏–∫–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ (—Ç—è–≥–∞—á, –±—É—Å, –∞–≤—Ç–æ–≤–æ–∑ –∏ —Ç.–¥.):")

@router.message(DriverForm.truck_type)
async def handle_truck_type(message: Message, state: FSMContext):
    await state.update_data(truck_type=message.text)
    await state.set_state(DriverForm.employment_type)
    await message.answer("üíº –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–≤–∞—Ö—Ç–∞, –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–∫—É, –ø–æ–¥–º–µ–Ω–∞ –∏ —Ç.–¥.):")

@router.message(DriverForm.employment_type)
async def handle_employment_type(message: Message, state: FSMContext):
    await state.update_data(employment_type=message.text)
    await state.set_state(DriverForm.ready_to_depart)
    await message.answer("üìÜ –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ? (—Å–µ–≥–æ–¥–Ω—è, —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –∏ —Ç.–¥.):")

@router.message(DriverForm.ready_to_depart)
async def handle_ready_to_depart(message: Message, state: FSMContext):
    await state.update_data(ready_to_depart=message.text)
    await state.set_state(DriverForm.contacts)
    await message.answer("üì± –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, Telegram –∏ —Ç.–¥.):")

@router.message(DriverForm.contacts)
async def handle_contacts(message: Message, state: FSMContext):
    await state.update_data(contacts=message.text)

    data = await state.get_data()
    data["driver_id"] = message.from_user.id
    data["is_active"] = True

    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO drivers (
                full_name, birth_date, citizenship, residence,
                license_type, experience, languages, documents,
                truck_type, employment_type, ready_to_depart,
                contacts, is_active, created_at, id
            )
            VALUES (
                $1, $2, $3, $4,
                $5, $6, $7, $8,
                $9, $10, $11,
                $12, $13, CURRENT_TIMESTAMP, $14
            )
            ON CONFLICT (id) DO UPDATE
            SET
                full_name = EXCLUDED.full_name,
                birth_date = EXCLUDED.birth_date,
                citizenship = EXCLUDED.citizenship,
                residence = EXCLUDED.residence,
                license_type = EXCLUDED.license_type,
                experience = EXCLUDED.experience,
                languages = EXCLUDED.languages,
                documents = EXCLUDED.documents,
                truck_type = EXCLUDED.truck_type,
                employment_type = EXCLUDED.employment_type,
                ready_to_depart = EXCLUDED.ready_to_depart,
                contacts = EXCLUDED.contacts,
                is_active = TRUE,
                created_at = CURRENT_TIMESTAMP
        """, data["full_name"], data["birth_date"], data["citizenship"], data["residence"],
             data["license_type"], data["experience"], data["languages"], data["documents"],
             data["truck_type"], data["employment_type"], data["ready_to_depart"],
             data["contacts"], True, data["driver_id"])

    await state.clear()
    await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!")
