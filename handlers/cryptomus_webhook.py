# handlers/cryptomus_webhook.py

from aiohttp import web
import hmac
import hashlib
import json
import os

from db import save_payment, confirm_payment  # confirm_payment –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
from typing import Literal

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
CRYPTOMUS_API_KEY = os.getenv("CRYPTOMUS_API_KEY", "test_key")
CRYPTOMUS_MERCHANT = os.getenv("CRYPTOMUS_MERCHANT", "test_merchant")

# üì° –†–æ—É—Ç–µ—Ä –¥–ª—è webhook
cryptomus_webhook = web.RouteTableDef()


@cryptomus_webhook.post("/cryptomus/webhook")
async def handle_cryptomus_webhook(request: web.Request):
    try:
        raw_body = await request.read()
        headers = request.headers
        received_sign = headers.get("sign")

        if not received_sign:
            return web.Response(status=401, text="Missing sign")

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        generated_sign = hmac.new(
            CRYPTOMUS_API_KEY.encode(),
            raw_body,
            hashlib.sha256
        ).hexdigest()

        if received_sign != generated_sign:
            return web.Response(status=401, text="Invalid signature")

        # üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        data = json.loads(raw_body)

        if data.get("status") != "paid":
            return web.Response(status=200, text="Ignored")

        # üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
        custom = data.get("custom", {})
        user_id = int(custom.get("user_id", 0))
        role = custom.get("role", "driver")
        payment_type = custom.get("payment_type", "premium")

        amount = float(data.get("amount", 0))
        currency = data.get("currency", "USDT")
        method = data.get("payment_method", "cryptomus")
        description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ({role})"

        # üîå –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        pool = request.app["db"]

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂
        await save_payment(
            pool, user_id, role, amount, currency,
            method, payment_type, description
        )

        # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await confirm_payment(pool, user_id, role, amount, payment_type)

        return web.Response(status=200, text="OK")

    except Exception as e:
        print(f"[Cryptomus Webhook Error] {e}")
        return web.Response(status=500, text=f"Internal error: {e}")
