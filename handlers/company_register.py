from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from asyncpg import Pool
from states.company_state import CompanyStart
import uuid

router = Router()

# üì¶ –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
@router.message(F.text == "üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é")
async def start_company_registration(message: Message, state: FSMContext):
    await state.set_state(CompanyStart.name)
    await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")

@router.message(CompanyStart.name)
async def set_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CompanyStart.description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")

@router.message(CompanyStart.description)
async def set_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CompanyStart.country)
    await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è:")

@router.message(CompanyStart.country)
async def set_country(message: Message, state: FSMContext):
    await state.update_data(country=message.text)
    await state.set_state(CompanyStart.city)
    await message.answer("üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")

@router.message(CompanyStart.city)
async def set_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(CompanyStart.regions)
    await message.answer("üåê –£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ï–≤—Ä–æ–ø–∞, –°–ù–ì, –°–®–ê):")

@router.message(CompanyStart.regions)
async def set_regions(message: Message, state: FSMContext):
    await state.update_data(regions=[r.strip() for r in message.text.split(",")])
    await state.set_state(CompanyStart.confirm)

    data = await state.get_data()
    preview = (
        f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {data['country']}, –≥–æ—Ä–æ–¥: {data['city']}\n"
        f"üìç –†–µ–≥–∏–æ–Ω—ã: {', '.join(data['regions'])}"
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"{preview}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:", reply_markup=kb)

@router.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def confirm_company(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    company_id = uuid.uuid4()

    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO companies (
                id, name, description, country, city, owner_id, regions
            ) VALUES ($1, $2, $3, $4, $5, $6, $7)
        """, company_id, data["name"], data["description"], data["country"],
             data["city"], user_id, data["regions"])

        # –î–æ–±–∞–≤–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å is_owner = TRUE
        manager_id = uuid.uuid4()
        await conn.execute("""
            INSERT INTO managers (
                id, company_id, user_id, full_name, position,
                phone, email, is_owner, is_active, regions
            ) VALUES (
                $1, $2, $3, '-', '-', '-', '-', TRUE, FALSE, $4
            )
        """, manager_id, company_id, user_id, data["regions"])

    await state.clear()
    await message.answer("‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Premium –¥–ª—è —Ä–∞–±–æ—Ç—ã.")

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_company_registration(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
