from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from asyncpg import Pool
import uuid

router = Router()

# üì© –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
@router.callback_query(F.data.startswith("respond_"))
async def handle_response(callback: CallbackQuery):
    user_id = callback.from_user.id
    vacancy_id = callback.data.split("_")[1]

    app = callback.bot._ctx.get("application")
    pool: Pool = app["db"]

    async with pool.acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–Ω–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è –µ—Å—Ç—å?
        driver = await conn.fetchrow("SELECT id FROM drivers WHERE id = $1", user_id)
        if not driver:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è?
        existing = await conn.fetchrow("SELECT 1 FROM responses WHERE vacancy_id = $1 AND driver_id = $2", vacancy_id, user_id)
        if existing:
            await callback.answer("‚è≥ –í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å.", show_alert=True)
            return

        # –í—Å—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞
        await conn.execute("""
            INSERT INTO responses (vacancy_id, driver_id)
            VALUES ($1, $2)
        """, uuid.UUID(vacancy_id), user_id)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤ –±—É–¥—É—â–µ–º –æ—Ç–ø—Ä–∞–≤–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä—É)
        await callback.answer("‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
