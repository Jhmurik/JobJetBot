from aiogram import Router, F
from aiogram.types import Message
from asyncpg import Pool

router = Router()

# üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = [787919568, 5814167740]  # üëà –î–æ–±–∞–≤—å –Ω—É–∂–Ω—ã–µ ID

@router.message(F.text.startswith("/moderate"))
async def moderate_driver(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")

    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    async with pool.acquire() as conn:
        drivers = await conn.fetch("""
            SELECT * FROM drivers 
            WHERE is_approved = false
            ORDER BY created_at ASC
            LIMIT 5
        """)
        if not drivers:
            return await message.answer("‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")

        for driver in drivers:
            text = (
                f"üë§ <b>–ê–Ω–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è</b>\n"
                f"üÜî ID: <code>{driver['id']}</code>\n"
                f"üë®‚Äçüîß –ò–º—è: {driver['full_name']}\n"
                f"üöö –¢–°: {driver.get('truck_type') or '‚Äî'}\n"
                f"üìç –û–ø—ã—Ç: {driver.get('experience') or '‚Äî'}\n"
                f"üåç –†–µ–≥–∏–æ–Ω—ã: {', '.join(driver['regions'] or []) or '‚Äî'}\n\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                f"<code>/approve {driver['id']}</code>\n"
                f"–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n"
                f"<code>/reject {driver['id']}</code>"
            )
            await message.answer(text, parse_mode="HTML")

@router.message(F.text.startswith("/approve"))
async def approve_driver(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        driver_id = int(message.text.split(" ")[1])
        app = message.bot._ctx.get("application")
        pool: Pool = app["db"]
        async with pool.acquire() as conn:
            await conn.execute("UPDATE drivers SET is_approved = true WHERE id = $1", driver_id)
        await message.answer(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ {driver_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

@router.message(F.text.startswith("/reject"))
async def reject_driver(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        driver_id = int(message.text.split(" ")[1])
        app = message.bot._ctx.get("application")
        pool: Pool = app["db"]
        async with pool.acquire() as conn:
            await conn.execute("DELETE FROM drivers WHERE id = $1", driver_id)
        await message.answer(f"‚ùå –ê–Ω–∫–µ—Ç–∞ {driver_id} —É–¥–∞–ª–µ–Ω–∞.")
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
