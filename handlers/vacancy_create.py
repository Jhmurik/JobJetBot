from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states.vacancy_state import VacancyForm
from asyncpg import Pool
import uuid

router = Router()

# üì¢ –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"
@router.message(F.text == "üì¢ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def create_vacancy_start(message: Message, state: FSMContext):
    await state.set_state(VacancyForm.title)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")

@router.message(VacancyForm.title)
async def set_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(VacancyForm.truck_type)
    await message.answer("üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Ç—è–≥–∞—á, –±—É—Å, –∞–≤—Ç–æ–≤–æ–∑ –∏ —Ç.–¥.):")

@router.message(VacancyForm.truck_type)
async def set_truck_type(message: Message, state: FSMContext):
    await state.update_data(truck_type=message.text)
    await state.set_state(VacancyForm.salary)
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç 2000‚Ç¨/–º–µ—Å):")

@router.message(VacancyForm.salary)
async def set_salary(message: Message, state: FSMContext):
    await state.update_data(salary=message.text)
    await state.set_state(VacancyForm.region)
    await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ï–≤—Ä–æ–ø–∞, –°–ù–ì):")

@router.message(VacancyForm.region)
async def set_region(message: Message, state: FSMContext):
    await state.update_data(region=message.text)
    await state.set_state(VacancyForm.requirements)
    await message.answer("üìã –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ–¥–∏—Ç–µ–ª—é:")

@router.message(VacancyForm.requirements)
async def set_requirements(message: Message, state: FSMContext):
    await state.update_data(requirements=message.text)
    await state.set_state(VacancyForm.contacts)
    await message.answer("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏ —Ç.–¥.):")

@router.message(VacancyForm.contacts)
async def set_contacts(message: Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    await state.set_state(VacancyForm.confirm)

    data = await state.get_data()
    preview = (
        f"üì¢ *–í–∞–∫–∞–Ω—Å–∏—è: {data['title']}*\n"
        f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data['truck_type']}\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {data['salary']}\n"
        f"üåç –†–µ–≥–∏–æ–Ω: {data['region']}\n"
        f"üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {data['requirements']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contacts']}"
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

    await message.answer(preview, parse_mode="Markdown")
    await message.answer("üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:", reply_markup=kb)

@router.message(F.text == "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def confirm_vacancy(message: Message, state: FSMContext):
    data = await state.get_data()
    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    vacancy_id = uuid.uuid4()
    user_id = message.from_user.id

    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO vacancies (
                id, manager_id, title, truck_type, salary, region, requirements, contacts, created_at
            ) VALUES (
                $1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP
            )
        """, vacancy_id, user_id, data['title'], data['truck_type'], data['salary'],
             data['region'], data['requirements'], data['contacts'])

    await state.clear()
    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_vacancy(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
