from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states.vacancy_state import VacancyForm
from asyncpg import Pool
import uuid

router = Router()

# üîò –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
@router.message(F.text.lower() == "üì¢ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def start_vacancy_publish(message: Message, state: FSMContext):
    await state.set_state(VacancyForm.title)
    await message.answer("üìå –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í–æ–¥–∏—Ç–µ–ª—å C+E –ø–æ –ï–≤—Ä–æ–ø–µ):")

# üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫
@router.message(VacancyForm.title)
async def set_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(VacancyForm.truck_type)
    await message.answer("üöõ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Ç—è–≥–∞—á, –±—É—Å, –∞–≤—Ç–æ–≤–æ–∑ –∏ —Ç.–¥.):")

# üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
@router.message(VacancyForm.truck_type)
async def set_truck_type(message: Message, state: FSMContext):
    await state.update_data(truck_type=message.text)
    await state.set_state(VacancyForm.salary)
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç 2000‚Ç¨, —Å—Ç–∞–≤–∫–∞, –∑–∞ –∫–º –∏ —Ç.–¥.):")

# üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞
@router.message(VacancyForm.salary)
async def set_salary(message: Message, state: FSMContext):
    await state.update_data(salary=message.text)
    await state.set_state(VacancyForm.region)
    await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ï–≤—Ä–æ–ø–∞, –°–ù–ì, –°–®–ê):")

# üåç –†–µ–≥–∏–æ–Ω
@router.message(VacancyForm.region)
async def set_region(message: Message, state: FSMContext):
    await state.update_data(region=message.text)
    await state.set_state(VacancyForm.requirements)
    await message.answer("üìã –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ–¥–∏—Ç–µ–ª—é:")

# üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
@router.message(VacancyForm.requirements)
async def set_requirements(message: Message, state: FSMContext):
    await state.update_data(requirements=message.text)
    await state.set_state(VacancyForm.contacts)
    await message.answer("üì± –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (–Ω–æ–º–µ—Ä, Telegram, email –∏ —Ç.–¥.):")

# üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã
@router.message(VacancyForm.contacts)
async def set_contacts(message: Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    data = await state.get_data()

    preview = (
        f"üì¢ *–í–∞–∫–∞–Ω—Å–∏—è: {data['title']}*\n"
        f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data['truck_type']}\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {data['salary']}\n"
        f"üåç –†–µ–≥–∏–æ–Ω: {data['region']}\n"
        f"üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {data['requirements']}\n"
        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contacts']}\n\n"
        "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é?"
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

    await state.set_state(VacancyForm.confirm)
    await message.answer(preview, reply_markup=kb, parse_mode="Markdown")

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.message(F.text == "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
async def confirm_publish(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id

    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ manager_id –∏ company_id
    async with pool.acquire() as conn:
        manager = await conn.fetchrow("SELECT id, company_id FROM managers WHERE user_id = $1", user_id)
        if not manager:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return

        manager_id = manager["id"]
        company_id = manager["company_id"]

        vacancy_id = uuid.uuid4()
        await conn.execute("""
            INSERT INTO vacancies (
                id, company_id, manager_id, title, truck_type,
                salary, region, requirements, contacts,
                is_published, created_at
            ) VALUES (
                $1, $2, $3, $4, $5,
                $6, $7, $8, $9,
                TRUE, CURRENT_TIMESTAMP
            )
        """, vacancy_id, company_id, manager_id, data["title"], data["truck_type"],
             data["salary"], data["region"], data["requirements"], data["contacts"])

    await state.clear()
    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")]
        ],
        resize_keyboard=True
    ))

# ‚ùå –û—Ç–º–µ–Ω–∞
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_publish(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
