import httpx
import os
import uuid
import hmac
import hashlib
import json

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
CRYPTO_API_KEY = os.getenv("CRYPTOMUS_API_KEY")        # API –∫–ª—é—á Cryptomus
CRYPTO_MERCHANT = os.getenv("CRYPTOMUS_MERCHANT")      # ID –º–µ—Ä—á–∞–Ω—Ç–∞
CRYPTO_SECRET = os.getenv("CRYPTOMUS_SECRET")          # –°–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏

# üßÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ Cryptomus
def generate_signature(data: dict, secret: str) -> str:
    data_str = json.dumps(data, separators=(",", ":"), ensure_ascii=False)
    return hmac.new(secret.encode(), data_str.encode(), hashlib.sha256).hexdigest()

# üîó –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
async def create_payment_link(user_id: int, role: str, amount: float, payment_type: str) -> str:
    url = "https://api.cryptomus.com/v1/payment"

    payload = {
        "order_id": str(uuid.uuid4()),
        "amount": str(amount),
        "currency": "USDT",
        "network": "TRC20",
        "url_return": "https://t.me/JobJetStarBot",  # –°—Å—ã–ª–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        "lifetime": 900,                             # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—á—ë—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        "to_currency": "USDT",
        "is_payment_multiple": False
    }

    # ‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    signature = generate_signature(payload, CRYPTO_SECRET)

    headers = {
        "merchant": CRYPTO_MERCHANT,
        "sign": signature,
        "Content-Type": "application/json",
        "api-key": CRYPTO_API_KEY
    }

    # üì° –ó–∞–ø—Ä–æ—Å –∫ API
    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload, headers=headers)
        response.raise_for_status()
        data = response.json()

    if "result" not in data or "url" not in data["result"]:
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {data}")

    return data["result"]["url"]
