from aiohttp import web
from db import activate_driver, activate_manager, save_payment
import hmac
import hashlib
import os
import json

CRYPTOMUS_SECRET = os.getenv("CRYPTOMUS_SECRET")

# ✅ Проверка подписи от Cryptomus
def verify_signature(body: bytes, signature: str) -> bool:
    computed = hmac.new(CRYPTOMUS_SECRET.encode(), body, hashlib.sha256).hexdigest()
    return hmac.compare_digest(computed, signature)

# 📥 Webhook от Cryptomus
async def cryptomus_webhook(request: web.Request) -> web.Response:
    try:
        body = await request.read()
        signature = request.headers.get("sign")

        if not signature or not verify_signature(body, signature):
            return web.Response(status=401, text="❌ Invalid signature")

        data = json.loads(body)
        status = data.get("status")
        user_id_raw = data.get("order_id")

        try:
            user_id = int(user_id_raw)
        except ValueError:
            return web.Response(status=400, text="❌ Invalid user_id")

        if status == "paid":
            # 🔄 Поддержка разных структур
            role = data.get("custom", {}).get("role") or data.get("custom_fields", {}).get("role") or "driver"

            app = request.app
            pool = app["db"]

            async with pool.acquire() as conn:
                if role == "driver":
                    await activate_driver(conn, user_id)
                elif role == "manager":
                    await activate_manager(conn, user_id)

                # 💳 Сохраняем платёж
                await save_payment(pool, {
                    "user_id": user_id,
                    "role": role,
                    "amount": data.get("amount"),
                    "currency": data.get("currency"),
                    "payment_method": "cryptomus",
                    "payment_type": "premium",
                    "description": "Подтверждение от Webhook"
                })

            return web.Response(status=200, text="✅ Payment processed")

        return web.Response(status=200, text="🕐 Payment not confirmed")

    except Exception as e:
        print(f"Webhook error: {e}")
        return web.Response(status=500, text="❌ Server error")
