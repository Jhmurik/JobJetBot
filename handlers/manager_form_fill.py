from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.manager_state import ManagerForm
from keyboards.start_kb import get_region_keyboard
import uuid

router = Router()

@router.message(F.text == "üìã –°—Ç–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def start_manager_form(message: Message, state: FSMContext):
    await state.set_state(ManagerForm.full_name)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")

@router.message(ManagerForm.full_name)
async def form_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(ManagerForm.position)
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: HR, —Ä–µ–∫—Ä—É—Ç–µ—Ä):")

@router.message(ManagerForm.position)
async def form_position(message: Message, state: FSMContext):
    await state.update_data(position=message.text)
    await state.set_state(ManagerForm.phone)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(ManagerForm.phone)
async def form_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(ManagerForm.email)
    await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ email (–µ—Å–ª–∏ –µ—Å—Ç—å):")

@router.message(ManagerForm.email)
async def form_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await state.set_state(ManagerForm.company_name)
    await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ:")

@router.message(ManagerForm.company_name)
async def form_company_name(message: Message, state: FSMContext):
    await state.update_data(company_name=message.text)
    await state.set_state(ManagerForm.country)
    await message.answer("üåç –°—Ç—Ä–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏:")

@router.message(ManagerForm.country)
async def form_country(message: Message, state: FSMContext):
    await state.update_data(country=message.text)
    await state.set_state(ManagerForm.city)
    await message.answer("üèôÔ∏è –ì–æ—Ä–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏:")

@router.message(ManagerForm.city)
async def form_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(ManagerForm.regions)
    await state.update_data(regions=[])
    await message.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã —Ä–∞–±–æ—Ç—ã:", reply_markup=get_region_keyboard())

@router.callback_query(F.data.startswith("region_"))
async def form_regions(callback: CallbackQuery, state: FSMContext):
    region = callback.data.split("_")[1]
    data = await state.get_data()
    regions = data.get("regions", [])

    if region == "done":
        await state.update_data(regions=regions)

        app = callback.bot._ctx.get("application")
        pool = app["db"]
        manager_data = await state.get_data()

        # –ó–∞–ø–∏—Å—å –≤ –ë–î
        import asyncpg
        async with pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO managers (
                    id, user_id, full_name, position, phone, email,
                    company_name, company_country, company_city, is_owner, is_active, regions
                ) VALUES (
                    $1, $2, $3, $4, $5, $6,
                    $7, $8, $9, FALSE, FALSE, $10
                )
            """, str(uuid.uuid4()), callback.from_user.id,
                 manager_data["full_name"], manager_data["position"], manager_data["phone"], manager_data["email"],
                 manager_data["company_name"], manager_data["country"], manager_data["city"], manager_data["regions"]
            )

        await state.clear()
        await callback.message.edit_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä. –û–∂–∏–¥–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
    else:
        if region in regions:
            regions.remove(region)
        else:
            regions.append(region)
        await state.update_data(regions=regions)
        await callback.message.edit_reply_markup(reply_markup=get_region_keyboard(regions))
