from aiogram import Router, F
from aiogram.types import Message
from asyncpg import Pool

router = Router()

# üîê –¢–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å Premium
@router.message(F.text.startswith("/chat "))
async def manager_chat(message: Message):
    parts = message.text.strip().split(" ", 2)
    if len(parts) < 3:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /chat <driver_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")

    _, driver_id_str, content = parts

    try:
        driver_id = int(driver_id_str)
    except ValueError:
        return await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤–æ–¥–∏—Ç–µ–ª—è.")

    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    async with pool.acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        is_premium = await conn.fetchval("""
            SELECT TRUE FROM payments 
            WHERE user_id = $1 AND role = 'manager' AND payment_type = 'premium'
            ORDER BY created_at DESC LIMIT 1
        """, message.from_user.id)

        if not is_premium:
            return await message.answer("‚õî –ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Å Premium-–ø–æ–¥–ø–∏—Å–∫–æ–π.")

        driver_exists = await conn.fetchval("SELECT 1 FROM drivers WHERE id = $1", driver_id)
        if not driver_exists:
            return await message.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    try:
        await message.bot.send_message(
            chat_id=driver_id,
            text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{content}"
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
