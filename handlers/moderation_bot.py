from aiogram import Router, F
from aiogram.types import Message
from asyncpg import Pool

router = Router()

# üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = [787919568, 5814167740]

# üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
@router.message(F.text.startswith("/moderate"))
async def moderate_driver(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")

    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    async with pool.acquire() as conn:
        drivers = await conn.fetch("""
            SELECT * FROM drivers 
            WHERE is_approved = false
            ORDER BY created_at ASC
            LIMIT 5
        """)
        if not drivers:
            return await message.answer("‚úÖ –í—Å–µ –∞–Ω–∫–µ—Ç—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")

        for driver in drivers:
            text = (
                f"üë§ <b>–ê–Ω–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è</b>\n"
                f"üÜî ID: <code>{driver['id']}</code>\n"
                f"üë®‚Äçüîß –ò–º—è: {driver['full_name']}\n"
                f"üöö –¢–°: {driver.get('truck_type') or '‚Äî'}\n"
                f"üìç –û–ø—ã—Ç: {driver.get('experience') or '‚Äî'}\n"
                f"üåç –†–µ–≥–∏–æ–Ω—ã: {', '.join(driver['regions'] or []) or '‚Äî'}\n\n"
                f"‚úÖ /approve {driver['id']}\n"
                f"‚ùå /reject {driver['id']}"
            )
            await message.answer(text, parse_mode="HTML")

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
@router.message(F.text.startswith("/approve"))
async def approve_driver(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        parts = message.text.split(" ")
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        driver_id = int(parts[1])
        app = message.bot._ctx.get("application")
        pool: Pool = app["db"]

        async with pool.acquire() as conn:
            await conn.execute("UPDATE drivers SET is_approved = true, is_active = true WHERE id = $1", driver_id)

        await message.answer(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ <code>{driver_id}</code> –æ–¥–æ–±—Ä–µ–Ω–∞.", parse_mode="HTML")
        await message.bot.send_message(driver_id, "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º!")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve <id>")

# ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
@router.message(F.text.startswith("/reject"))
async def reject_driver(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        parts = message.text.split(" ")
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        driver_id = int(parts[1])
        app = message.bot._ctx.get("application")
        pool: Pool = app["db"]

        async with pool.acquire() as conn:
            await conn.execute("DELETE FROM drivers WHERE id = $1", driver_id)

        await message.answer(f"‚ùå –ê–Ω–∫–µ—Ç–∞ <code>{driver_id}</code> —É–¥–∞–ª–µ–Ω–∞.", parse_mode="HTML")
        await message.bot.send_message(driver_id, "üö´ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reject <id>")
