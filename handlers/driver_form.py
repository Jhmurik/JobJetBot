from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Command
from states.driver_state import DriverForm

router = Router()

# –ù–û–í–û–ï: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã (–∫–æ–º–∞–Ω–¥–æ–π)
@router.message(Command("fill_form"))
async def start_driver_form_command(message: Message, state: FSMContext):
    await state.clear() # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    await state.set_state(DriverForm.full_name)
    await message.answer("üìù –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–ø–æ–ª–Ω–æ–µ –∏–º—è* (–§–ò–û):", parse_mode="Markdown")

# üîπ –ü–æ–ª–Ω–æ–µ –∏–º—è
@router.message(DriverForm.full_name)
async def process_full_name(message: Message, state: FSMContext):
    if not message.text: # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(full_name=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    await state.set_state(DriverForm.birth_date)

# üîπ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
@router.message(DriverForm.birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(birth_date=message.text.strip())
    await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:")
    await state.set_state(DriverForm.citizenship)

# üîπ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
@router.message(DriverForm.citizenship)
async def process_citizenship(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(citizenship=message.text.strip())
    await message.answer("üè† –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã —Å–µ–π—á–∞—Å –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")
    await state.set_state(DriverForm.residence)

# üîπ –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
@router.message(DriverForm.residence)
async def process_residence(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(residence=message.text.strip())
    await message.answer("üöò –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, C, CE):")
    await state.set_state(DriverForm.license_type)

# üîπ –ü—Ä–∞–≤–∞
@router.message(DriverForm.license_type)
async def process_license_type(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(license_type=message.text.strip())
    await message.answer("üìà –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤–æ–∂–¥–µ–Ω–∏—è —É –≤–∞—Å?")
    await state.set_state(DriverForm.experience)

# üîπ –û–ø—ã—Ç
@router.message(DriverForm.experience)
async def process_experience(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø—ã—Ç –≤–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(experience=message.text.strip())
    await message.answer("üó£Ô∏è –ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    await state.set_state(DriverForm.languages)

# üîπ –Ø–∑—ã–∫–∏
@router.message(DriverForm.languages)
async def process_languages(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫–∏ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    raw = message.text.strip()
    languages = [lang.strip() for lang in raw.split(",") if lang.strip()]
    await state.update_data(languages=languages)
    await message.answer("üìÑ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã?")
    await state.set_state(DriverForm.documents)

# üîπ –î–æ–∫—É–º–µ–Ω—Ç—ã
@router.message(DriverForm.documents)
async def process_documents(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(documents=message.text.strip())
    await message.answer("üöõ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø –≥—Ä—É–∑–æ–≤–∏–∫–∞:")
    await state.set_state(DriverForm.truck_type)

# üîπ –¢–∏–ø –≥—Ä—É–∑–æ–≤–∏–∫–∞
@router.message(DriverForm.truck_type)
async def process_truck_type(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–æ–≤–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(truck_type=message.text.strip())
    await message.answer("üìÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–ø–æ–ª–Ω–∞—è/–≤—Ä–µ–º–µ–Ω–Ω–∞—è):")
    await state.set_state(DriverForm.employment_type)

# üîπ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
@router.message(DriverForm.employment_type)
async def process_employment_type(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(employment_type=message.text.strip())
    await message.answer("üïí –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–µ–∑–¥—É (–¥–∞—Ç–∞ –∏–ª–∏ '—Å—Ä–∞–∑—É'):")
    await state.set_state(DriverForm.ready_to_depart)

# üîπ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–µ–∑–¥—É
@router.message(DriverForm.ready_to_depart)
async def process_ready_to_depart(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–µ–∑–¥—É —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(ready_to_depart=message.text.strip())
    await message.answer("üì± –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏ —Ç.–¥.):")
    await state.set_state(DriverForm.contacts)

# üîπ –ö–æ–Ω—Ç–∞–∫—Ç—ã
@router.message(DriverForm.contacts)
async def process_contacts(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(contacts=message.text.strip())
    data = await state.get_data()

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
    summary_parts = []
    for key, value in data.items():
        if isinstance(value, list):
            summary_value = ', '.join(value) if value else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        else:
            summary_value = value if value else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        summary_parts.append(f"*{key.replace('_', ' ').capitalize()}*: {summary_value}")

    summary = "\n".join(summary_parts)

    await message.answer(
        f"üßæ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{summary}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ *–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é* –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã.",
        parse_mode="Markdown"
    )
    await state.set_state(DriverForm.confirmation)

# üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.message(DriverForm.confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
        return

    if message.text.strip().lower() == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        data = await state.get_data()

        # –ù–û–í–û–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å pool –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp
        pool = message.bot.get('__APP__').get("db")
        if not pool:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        async with pool.acquire() as conn:
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—è –≤ INSERT —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∞–º –≤ –≤–∞—à–µ–π –ë–î
            # –∏ —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ $1, $2... –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ.
            # –î–æ–±–∞–≤–∏–ª 'ready_to_work' = TRUE –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–∞–∫ –±—ã–ª–æ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ.
            await conn.execute("""
                INSERT INTO drivers (
                    full_name, birth_date, citizenship, residence, license_type,
                    experience, languages, documents, truck_type, employment_type,
                    ready_to_work, ready_to_depart, contacts
                ) VALUES (
                    $1, $2, $3, $4, $5,
                    $6, $7, $8, $9, $10,
                    TRUE, $11, $12
                )
            """,
                data.get("full_name", None), # –ò—Å–ø–æ–ª—å–∑—É–µ–º None, —á—Ç–æ–±—ã –ë–î –º–æ–≥–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å NULL
                data.get("birth_date", None),
                data.get("citizenship", None),
                data.get("residence", None),
                data.get("license_type", None),
                data.get("experience", None),
                data.get("languages", []), # –°–ø–∏—Å–æ–∫ –¥–ª—è PostgeSQL TEXT[]
                data.get("documents", None),
                data.get("truck_type", None),
                data.get("employment_type", None),
                data.get("ready_to_depart", None),
                data.get("contacts", None)
            )

        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        await state.clear()
    else:
        await message.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É' –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /fill_form.")
        await state.clear()

