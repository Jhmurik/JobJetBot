from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from states.start_state import StartState
from keyboards.start_kb import get_language_keyboard, get_role_keyboard, get_region_keyboard
from uuid import UUID

router = Router()

# üí¨ /start (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π deep-link –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
@router.message(Command("start"))
async def start_bot(message: Message, state: FSMContext, command: CommandObject):
    await state.clear()

    payload = command.args
    if payload and payload.startswith("join_"):
        try:
            company_id = UUID(payload.replace("join_", ""))
            await state.update_data(join_company_id=company_id, role="manager")
        except Exception:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            return

    await state.set_state(StartState.language)
    await message.answer("üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=get_language_keyboard())

# üåê –í—ã–±–æ—Ä —è–∑—ã–∫–∞
@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: CallbackQuery, state: FSMContext):
    lang = callback.data.split("_")[1]
    await state.update_data(language=lang)

    data = await state.get_data()
    if data.get("role") == "manager" and data.get("join_company_id"):
        await state.update_data(regions=[])
        await state.set_state(StartState.regions)
        await callback.message.edit_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω(—ã) –¥–ª—è —Ä–∞–±–æ—Ç—ã:", reply_markup=get_region_keyboard())
    else:
        await state.set_state(StartState.role)
        await callback.message.edit_text("üë§ –ö—Ç–æ –≤—ã?", reply_markup=get_role_keyboard())

# üë§ –í—ã–±–æ—Ä —Ä–æ–ª–∏
@router.callback_query(F.data.startswith("role_"))
async def set_role(callback: CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[1]
    await state.update_data(role=role, regions=[])
    await state.set_state(StartState.regions)
    await callback.message.edit_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω(—ã) –¥–ª—è —Ä–∞–±–æ—Ç—ã:", reply_markup=get_region_keyboard())

# üåç –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)
@router.callback_query(F.data.startswith("region_"))
async def set_regions(callback: CallbackQuery, state: FSMContext):
    region = callback.data.split("_")[1]
    data = await state.get_data()
    regions = data.get("regions", [])
    role = data.get("role")

    if region == "done":
        await state.update_data(regions=regions)
        await state.clear()

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
        if role == "driver":
            menu_kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è")],
                    [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                    [KeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")],
                    [KeyboardButton(text="üö´ –í—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
                    [KeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É (–ø–ª–∞—Ç–Ω–æ)")]
                ],
                resize_keyboard=True
            )
            await callback.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüèÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=None)
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)

        elif role == "company":
            menu_kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é")],
                    [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                    [KeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")]
                ],
                resize_keyboard=True
            )
            await callback.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=None)
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)

        elif role == "manager":
            menu_kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üë®‚Äçüíº –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä")],
                    [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                    [KeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")]
                ],
                resize_keyboard=True
            )
            await callback.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüë®‚Äçüíº –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=None)
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)

    else:
        if region in regions:
            regions.remove(region)
        else:
            regions.append(region)
        await state.update_data(regions=regions)
        await callback.message.edit_reply_markup(reply_markup=get_region_keyboard(regions))
