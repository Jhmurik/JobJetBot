import os
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeDefault, MenuButtonCommands
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.exceptions import TelegramAPIError
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# üì¶ –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from handlers.start import router as start_router
from handlers.driver_form import router as driver_form_router
from handlers.driver_form_fill import router as driver_form_fill_router
from handlers.stats import router as stats_router
from handlers.manager_register import router as manager_router
from handlers.company_register import router as company_router
from handlers.payment_button import router as payment_router
from handlers.cryptomus_webhook import cryptomus_webhook
from handlers.vacancy_publish import router as vacancy_router
from handlers.vacancy_manage import router as vacancy_manage_router
from handlers.profile import router as profile_router
from handlers.vacancy_carousel import router as vacancy_carousel_router
from handlers.company_profile import router as company_profile_router
from handlers.responses_view import router as responses_router

# üîå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
from db import connect_to_db

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN", "–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨")
BASE_WEBHOOK_URL = os.getenv("WEBHOOK_BASE_URL", "https://jobjetbot.onrender.com")
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{BASE_WEBHOOK_URL.rstrip('/')}{WEBHOOK_PATH}"

# ü§ñ –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# üîÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(start_router)
dp.include_router(driver_form_router)
dp.include_router(driver_form_fill_router)
dp.include_router(stats_router)
dp.include_router(manager_router)
dp.include_router(company_router)
dp.include_router(payment_router)
dp.include_router(vacancy_router)
dp.include_router(vacancy_manage_router)
dp.include_router(profile_router)
dp.include_router(vacancy_carousel_router)
dp.include_router(company_profile_router)
dp.include_router(responses_router)

# üöÄ –ó–∞–ø—É—Å–∫ Webhook
async def on_startup(app: web.Application):
    print("üöÄ JobJet AI: –∑–∞–ø—É—Å–∫...")

    try:
        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True,
            allowed_updates=dp.resolve_used_update_types()
        )
        print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except TelegramAPIError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook: {e}")

    try:
        app["db"] = await connect_to_db()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

    bot._ctx = {"application": app}

    await bot.set_my_commands([
        BotCommand(command="start", description="üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ], scope=BotCommandScopeDefault())

    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

# üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def on_shutdown(app: web.Application):
    print("üõë JobJet AI: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    await bot.delete_webhook()
    await bot.session.close()

# üåç –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Webhook
def create_webhook_app():
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # ‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: –≤–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query
    SimpleRequestHandler(dispatcher=dp, bot=bot, handle_callback_query=True).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    app.add_routes(cryptomus_webhook)
    return app

# ‚ñ∂Ô∏è –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    mode = os.getenv("MODE", "webhook")

    if mode == "polling":
        from aiogram import executor

        async def polling_startup(dp):
            print("üîÅ Polling-—Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            await connect_to_db()
            await bot.delete_webhook()
            await bot.set_my_commands([
                BotCommand(command="start", description="üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ])
            await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

        executor.start_polling(dp, skip_updates=True, on_startup=polling_startup)
    else:
        print("üåê –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook...")
        web.run_app(create_webhook_app(), host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
