from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from states.driver_state import DriverForm

router = Router()

# ‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –≤ main.py
@router.message(DriverForm.full_name)
async def process_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    await state.set_state(DriverForm.birth_date)

@router.message(DriverForm.birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:")
    await state.set_state(DriverForm.citizenship)

@router.message(DriverForm.citizenship)
async def process_citizenship(message: Message, state: FSMContext):
    await state.update_data(citizenship=message.text)
    await message.answer("üè† –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã —Å–µ–π—á–∞—Å –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")
    await state.set_state(DriverForm.residence)

@router.message(DriverForm.residence)
async def process_residence(message: Message, state: FSMContext):
    await state.update_data(residence=message.text)
    await message.answer("üöò –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, C, CE):")
    await state.set_state(DriverForm.license_type)

@router.message(DriverForm.license_type)
async def process_license_type(message: Message, state: FSMContext):
    await state.update_data(license_type=message.text)
    await message.answer("üìà –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤–æ–∂–¥–µ–Ω–∏—è —É –≤–∞—Å?")
    await state.set_state(DriverForm.experience)

@router.message(DriverForm.experience)
async def process_experience(message: Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer("üó£Ô∏è –ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    await state.set_state(DriverForm.languages)

@router.message(DriverForm.languages)
async def process_languages(message: Message, state: FSMContext):
    await state.update_data(languages=message.text)
    await message.answer("üìÑ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã?")
    await state.set_state(DriverForm.documents)

@router.message(DriverForm.documents)
async def process_documents(message: Message, state: FSMContext):
    await state.update_data(documents=message.text)
    await message.answer("üöõ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø –≥—Ä—É–∑–æ–≤–∏–∫–∞:")
    await state.set_state(DriverForm.truck_type)

@router.message(DriverForm.truck_type)
async def process_truck_type(message: Message, state: FSMContext):
    await state.update_data(truck_type=message.text)
    await message.answer("üìÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–ø–æ–ª–Ω–∞—è/–≤—Ä–µ–º–µ–Ω–Ω–∞—è):")
    await state.set_state(DriverForm.employment_type)

@router.message(DriverForm.employment_type)
async def process_employment_type(message: Message, state: FSMContext):
    await state.update_data(employment_type=message.text)
    await message.answer("üïí –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–µ–∑–¥—É (–¥–∞—Ç–∞ –∏–ª–∏ '—Å—Ä–∞–∑—É'):")
    await state.set_state(DriverForm.ready_to_depart)

@router.message(DriverForm.ready_to_depart)
async def process_ready_to_depart(message: Message, state: FSMContext):
    await state.update_data(ready_to_work=True)
    await message.answer("üì± –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏ —Ç.–¥.):")
    await state.set_state(DriverForm.contacts)

@router.message(DriverForm.contacts)
async def process_contacts(message: Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    data = await state.get_data()

    summary = "\n".join([
        f"{key.replace('_', ' ').capitalize()}: {', '.join(value) if isinstance(value, list) else value}"
        for key, value in data.items()
    ])

    await message.answer(
        f"üßæ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{summary}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ *–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é* –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã.",
        parse_mode="Markdown"
    )
    await state.set_state(DriverForm.confirmation)

@router.message(DriverForm.confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        data = await state.get_data()
        pool = message.bot.get("db")
        if pool is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        async with pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO drivers (
                    full_name, birth_date, citizenship, residence, license_type,
                    experience, languages, documents, truck_type, employment_type,
                    ready_to_work, contacts
                ) VALUES (
                    $1, $2, $3, $4, $5,
                    $6, $7, $8, $9, $10,
                    TRUE, $11
                )
            """,
            data.get("full_name", ""),
            data.get("birth_date", ""),
            data.get("citizenship", ""),
            data.get("residence", ""),
            data.get("license_type", ""),
            data.get("experience", ""),
            [lang.strip() for lang in data.get("languages", "").split(",")],
            data.get("documents", ""),
            data.get("truck_type", ""),
            data.get("employment_type", ""),
            data.get("contacts", "")
            )

        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        await state.clear()
    else:
        await message.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'.")
        await state.clear()
