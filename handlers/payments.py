from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from db import save_payment_log
from utils.payment import create_payment_link  # —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
from asyncpg import Pool

router = Router()

@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def handle_buy_subscription(message: Message, state: FSMContext):
    user_id = message.from_user.id
    app = message.bot._ctx.get("application")
    pool: Pool = app["db"]

    data = await state.get_data()
    role = data.get("role", "driver")

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ü–µ–Ω—É
    price_usd = 3.00 if role == "driver" else 25.00
    payment_type = "premium"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    try:
        payment_url = await create_payment_link(user_id, role, price_usd, payment_type)
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    await save_payment_log(pool, user_id, role, price_usd, "USDT", "cryptomus", payment_type)

    await message.answer(
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n{payment_url}\n\n"
        f"üí∞ –°—É–º–º–∞: {price_usd}$ –≤ USDT (TRC20)\n"
        "‚è≥ –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ 15 –º–∏–Ω—É—Ç. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç."
    )
